<?php

namespace App\Controller\Admin;

use App\Admin\Fields\AttachmentViewField;
use App\Admin\Fields\LabelField;
use App\Admin\Filters\ProgressFilter;
use App\Components\Enum\PengajuanStatusEnum;
use App\Entity\Pengajuan;
use App\Entity\PengajuanProgress;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;
use Symfony\Bundle\SecurityBundle\Security;

class PengajuanCrudController extends AbstractCrudController
{
    public function __construct(private AdminUrlGenerator $urlGenerator, private Security $security)
    {
    }

    public static function getEntityFqcn(): string
    {
        return Pengajuan::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return parent::configureCrud($crud)
            ->setPaginatorUseOutputWalkers(true)
            ;
    }

    /**
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
//    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
//    {
//        /** @var User $user */
//        $user = $this->getUser();
//
//        $parent = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);
//        if (in_array('ROLE_USER', $user->getRoles())) {
//            return $parent->andWhere('entity.user = :user')
//                ->setParameter('user', $user);
//        } else if (in_array('ROLE_OPERATOR', $user->getRoles())) {
//            /** @var ManagerRegistry $subQuery */
//            $doctrine = $this->container->get('doctrine');
//            /** @var PengajuanProgressRepository $repository */
//            $repository = $doctrine->getManagerForClass(PengajuanProgress::class)->getRepository(PengajuanProgress::class);
//
//            return $parent
//                ->andWhere($parent->expr()->in("entity.id", $repository->subQuery()->getDQL()))
////                ->setParameter('status', 'Dalam Proses')
//                ->setParameter('user', $user)
////                ->setParameter('userNull', NULL)
//            ;
//
//
//        }
//
//
//        return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
//    }

    public function configureFilters(Filters $filters): Filters
    {
        return $filters
            ->add(ProgressFilter::new('progress')
                ->renderExpanded()
            )
            ;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->disable(Crud::PAGE_NEW)
//            ->setPermission(Action::EDIT, 'ROLE_SUPER_ADMIN')
            ->setPermission(Action::BATCH_DELETE, 'ROLE_SUPER_ADMIN')
            ->setPermission(Action::DELETE, 'ROLE_SUPER_ADMIN')
//            ->add(Action::INDEX,  Action::new(Crud::PAGE_DETAIL, 'Verifikasi')
//                ->displayIf(function (Pengajuan $pengajuan) {
//                    $progress = $pengajuan->getProgress();
//                    if ($progress->last() !== false) {
//                        return $progress->last()->getStatus() !== PengajuanStatusEnum::DITERIMA;
//                    }
//
//                    return true;
//                })
//            )
            ;
    }


    public function configureFields(string $pageName): iterable
    {

        if ($pageName === Crud::PAGE_EDIT) {
           return [
               FormField::addColumn(8, propertySuffix: 'pengajuan'),
               FormField::addFieldset(propertySuffix: 'pengajuan'),
               TextField::new('contract', 'No. Registrasi')
                   ->setColumns(4)
                    ->setDisabled()
                    ->setVirtual(true),
               TextField::new('instansi', 'Instansi')
                   ->setColumns(8)
                    ->setDisabled()
                    ->setVirtual(true),
               TextField::new('user.nama', 'Nama')
                   ->setColumns(8)
                    ->setDisabled()
                    ->setVirtual(true),
               TextField::new('user.nik', 'NIK')
                   ->setColumns(4)
                    ->setDisabled()
                    ->setVirtual(true),
               AttachmentViewField::new('attachment', 'Attachments'),

               FormField::addColumn(4, propertySuffix: 'progress'),
               FormField::addFieldset(propertySuffix: 'progress'),
               ChoiceField::new('pengajuanProgress.status', 'Status')
                   ->setChoices(PengajuanStatusEnum::toArray())
                   ->setFormTypeOption('placeholder', false)
                   ->renderExpanded(),
               TextareaField::new('pengajuanProgress.ket', 'Keterangan')
           ] ;
        }


        return [
            IdField::new('id')->hideOnForm()->hideOnIndex(),
            TextField::new('contract', 'No. Registrasi'),
            TextField::new('instansi', 'Instansi'),
            TextField::new('user.nama', 'Nama'),
            TextField::new('user.nik', 'NIK'),
            TextField::new('user.email', 'Email'),
            TextField::new('user.telepon', 'Telepon'),
            LabelField::new('pengajuanProgress.status', 'Progress')
                ->withModal()
        ];
    }
}
