<?php

namespace App\Controller\Admin;

use App\Entity\RefLayanan;
use App\Entity\RefLayananAttachment;
use App\Entity\RefPtsp;
use App\Form\AttachmentType;
use App\Form\RefLayananAttachmentType;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\HttpFoundation\File\File;

class RefLayananCrudController extends AbstractCrudController
{

    public static function getEntityFqcn(): string
    {
        return RefLayanan::class;
    }

    /**
     * @throws NotFoundExceptionInterface
     * @throws ContainerExceptionInterface
     */
    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $parent = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub

        $req = $this->container->get('request_stack')->getCurrentRequest();

        $parent
            ->join('entity.refPtsp', 'ref_ptsp')
            ->andWhere('ref_ptsp.id = :ptsp')
            ->setParameter('ptsp', $req->get('filters')['ptsp']['value'])
        ;

        return  $parent;
    }

    public function configureActions(Actions $actions): Actions
    {
        return parent::configureActions($actions)
            ->setPermissions([
                Action::INDEX => 'ROLE_ADMIN',
                Action::NEW => 'ROLE_ADMIN',
                Action::EDIT => 'ROLE_ADMIN',
                Action::DELETE => 'ROLE_ADMIN',
            ]);
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInPlural('Layanan')
            ->setEntityLabelInSingular('Layanan')
            ;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')->hideOnForm(),

            FormField::addColumn(8, propertySuffix: 'layanan'),
            FormField::addFieldset(propertySuffix: 'layanan'),
            TextField::new('nama', 'Layanan'),
            TextEditorField::new('persyaratan','Persyaratan')
                ->setTrixEditorConfig([
                    'blockAttributes' => [
                        'default' => ['tagName' => 'p'],
                        'heading1' => ['tagName' => 'h2'],
                    ],
                ]),

            FormField::addColumn(4, propertySuffix: 'ptsp'),
            FormField::addFieldset(propertySuffix: 'ptsp'),
            AssociationField::new('refPtsp', 'PTSP'),
            CollectionField::new('refLayananAttachments', 'Dokumen')
                ->setEntryType(RefLayananAttachmentType::class)
                ->setFormTypeOption('allow_add', true)
                ->setFormTypeOption('by_reference', false)
                ->onlyOnForms()
        ];
    }

    /**
     * @throws NotFoundExceptionInterface
     * @throws ContainerExceptionInterface
     */
    public function createEntity(string $entityFqcn)
    {
        /** @var RefLayanan $parent */
        $parent = parent::createEntity($entityFqcn);

        $req = $this->container->get('request_stack')->getCurrentRequest();

        $doctrine = $this->container->get('doctrine');
        $repository = $doctrine->getRepository(RefPtsp::class)->find($req->get('filters')['ptsp']['value']);

        $parent->setRefPtsp($repository);

        return $parent;
    }
}
